version: 0.2

phases:
  install:
    commands:
      - yum install -y jq
  build:
    commands:
      - ls
      - DeploymentSubnets="1,2"
      - echo $DeploymentSubnets
      - echo $DeploymentStackName
      - BUILD_NUMBER=$BuildNumber
      - echo $BUILD_NUMBER
      - cp $E injected-parameters.json
      - Env=$(aws secretsmanager get-secret-value --secret-id $EnvironmentSecret --query SecretString --output text | jq -rR 'fromjson? | .EnvName')
      - Ami=$(aws secretsmanager get-secret-value --secret-id $EnvironmentSecret --query SecretString --output text | jq -rR 'fromjson? | .Ami')
      - InstanceType=$(aws secretsmanager get-secret-value --secret-id $EnvironmentSecret --query SecretString --output text | jq -rR 'fromjson? | .InstanceType')
      - KeyPairName=$(aws secretsmanager get-secret-value --secret-id $EnvironmentSecret --query SecretString --output text | jq -rR 'fromjson? | .KeyPairName')
      - Vpc=$(aws secretsmanager get-secret-value --secret-id $EnvironmentSecret --query SecretString --output text | jq -rR 'fromjson? | .Vpc')
      - Subnets=$(aws secretsmanager get-secret-value --secret-id $EnvironmentSecret --query SecretString --output text | jq -rR 'fromjson? | .Subnets')
      - SecurityGroup=$(aws secretsmanager get-secret-value --secret-id $EnvironmentSecret --query SecretString --output text | jq -rR 'fromjson? | .SecurityGroup')      
      - |
        sed -i  "s/#Env/$Env/g" injected-parameters.json;
        sed -i  "s/#Company/$CompanyName/g" injected-parameters.json;
        sed -i  "s/#VpcId/$Vpc/g" injected-parameters.json;
        sed -i  "s/#AmiId/$Ami/g" injected-parameters.json;
        sed -i  "s/#SourcePortNumber/$Q/g" injected-parameters.json;
        sed -i  "s/#InstanceType/$InstanceType/g" injected-parameters.json;
        sed -i  "s/#KeyPairName/$KeyPairName/g" injected-parameters.json;
        sed -i  "s/#SecurityGroup/$SecurityGroup/g" injected-parameters.json;
        sed -i  "s/#NameTagPrefix/$K/g" injected-parameters.json;
        sed -i  "s~#PermissionsBoundary~$O~g" injected-parameters.json;
        sed -i  "s/#SystemComponent/$SystemComponent/g" injected-parameters.json;
        sed -i  "s/#Solution/$SystemName/g" injected-parameters.json;
        sed -i  "s~#RepositoryUri~$R~g" injected-parameters.json;
        sed -i  "s~#ArgOne~$G~g" injected-parameters.json;
        sed -i  "s~#SubnetId~$Subnets~g" injected-parameters.json;
        sed -i  "s~#BuildNumber~$BUILD_NUMBER~g" injected-parameters.json;

      - cat injected-parameters.json; 
      - cat $F;
      - |
        if ! aws cloudformation describe-stacks --stack-name $DeploymentStackName ; then
          echo -e "\nStack does not exist, creating ..."
          aws cloudformation create-stack --stack-name $DeploymentStackName --template-body file://$F --parameters file://injected-parameters.json --capabilities CAPABILITY_NAMED_IAM
          echo "Waiting for stack to be created ..."
          aws cloudformation wait stack-create-complete --stack-name $DeploymentStackName 
        else
          echo -e "\nStack exists, attempting update ..."
          aws cloudformation update-stack --stack-name $DeploymentStackName --template-body file://$F --parameters file://injected-parameters.json --capabilities CAPABILITY_NAMED_IAM
          echo "Waiting for stack to be updated ..."
          aws cloudformation wait stack-update-complete --stack-name $DeploymentStackName
        fi 
