version: 0.2
phases:
  install:
    commands:
      - yum install -y jq          
  build:
    commands:
      - ls
      - InstanceInService=$(aws ssm get-parameter --name $PipelineStackName-$SystemComponent-$Env-InstanceInService --query Parameter.Value --output text)
      - instanceIdInService=$(echo $InstanceInService | jq -rR 'fromjson? | .instanceId')
      - echo $instanceIdInService
      - |
        if [[ $instanceIdInService == null || $instanceIdInService == '' ]]; then
          echo "No proper instance in service from parameter store, checking if a cft exists for this environemnt"
          buildInService=0
          instancesInCft=$(aws cloudformation list-stack-resources --stack-name $DeploymentStackName --query "StackResourceSummaries[?ResourceType=='AWS::EC2::Instance'].PhysicalResourceId" --output text)
          echo $instancesInCft
          if [[ $instancesInCft != null ]]; then
            for id in $instancesInCft; do 
              echo $id
              buildId=$(aws ec2 describe-instances --instance-id $id --query "Reservations[].Instances[].Tags[?Key=='build'].Value" --output text)
              if [[ $buildId -gt $buildInService ]]; then
                buildInService=$buildId
                futureInstanceIdInService=$id
              else 
                echo $buildInService $futureInstanceIdInService
              fi
            done
          fi
          if [[ $futureInstanceIdInService == '' ]]; then
            echo "No Deployment found to smoke test"
            exit 1
          else 
            echo "Found highest build in service in deployment stack" 
          fi
        else
          echo "Executing Else since valid parameter store values found"
          futureInstanceIdInService=$(aws cloudformation list-stack-resources --stack-name $DeploymentStackName --query "StackResourceSummaries[?(ResourceType=='AWS::EC2::Instance'&&PhysicalResourceId!='$instanceIdInService')].PhysicalResourceId" --output text)
        fi
      - echo $futureInstanceIdInService      
      - legacyInstancesRegisteredOnElb=$(aws elb describe-instance-health --load-balancer-name $ElbName --region us-east-1 --query 'InstanceStates[].InstanceId[]' --output text )
      - echo $instancesRegisteredOnElb
      - aws elb register-instances-with-load-balancer --load-balancer-name $ElbName --instances $futureInstanceIdInService;
      - aws elb wait instance-in-service --load-balancer-name $ElbName --instances $futureInstanceIdInService;
      - |
        if [[ $legacyInstancesRegisteredOnElb != null && $legacyInstancesRegisteredOnElb != '' ]]; then
          aws elb deregister-instances-from-load-balancer --load-balancer-name $ElbName --instances $legacyInstancesRegisteredOnElb;
        fi
      - instanceIdInService=$futureInstanceIdInService;
      - commitInService=$CommitNumber;
      - buildInService=$BuildNumber;
      - pipelineXIdInService=$PipelineExecutionId;
      - aws ssm put-parameter --name $PipelineStackName-$SystemComponent-$Env-InstanceInService --type "String" --value "{\"commit\":\"$commitInService\",\"pipelineXId\":\"$pipelineXIdInService\",\"build\":\"$buildInService\",\"instanceId\":\"$instanceIdInService\"}" --overwrite;
