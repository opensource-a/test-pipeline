AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation :Creates AWS Resources for Application-Solution

Parameters:
  pCompanyName:
    Description: Company Name - Mandatory Parameter
    Type: String
  pCompanyGroupName:
    Description: Company Group Name - Mandatory Parameter
    Type: String    
  pSolutionName:
    Description: solution Name - Mandatory Parameter
    Type: String    
  pApplicationName:
    Description: Application Name - Mandatory Parameter
    Type: String     
  pApplicationGroup:
    Description: Company Application Group used in EC2 tags - Mandatory Parameter
    Type: String
  pPatchGroup:
    Description: Patch Group
    Type: String
  pLandscape:
    Description: Application Landscape - Mandatory Parameter
    Type: String
    ConstraintDescription: Landscape tag.
    AllowedValues:
      - DEV
      - TEST
      - STAGE
      - PROD
  pEc2RootEBSVolumeSize:
    Description: The volume size, in gibibytes (GiB).
    Type: String
    ConstraintDescription: This must be valid number
  pEc2SDFEBSVolumeSize:
    Description: The volume size, in gibibytes (GiB). /opt
    Type: String
    ConstraintDescription: This must be valid number
  pEc2SDBEBSVolumeSize:
    Description: The volume size, in gibibytes (GiB). Additional EBS Volume. Update the size
    Type: String
    ConstraintDescription: This must be valid number
  pCostCenter:
    Type: String
    Description: CostCenter
  pWBSE:
    Type: String
    Description: Project WBS ID.
  pITDR:
    Type: String
    Description: ITDR number.

  pAMIId:
    Description: Base AMI ID
    Type: String

  pOperatingSystem:
    Description: Operating System Tag
    Type: String
    Default: Redhat Enterprise Linux 8.x

  pApplicationSubGroup:
    Description: Application Sub Group
    Type: String

  pFundingSource:
    Type: String
    Description: Funding Source. CapEx or OpEx
    AllowedValues:
      - CapEx
      - OpEx
  pEC2Backup:
    Type: String
    Description: EC2 Backup required?
    AllowedValues:
      - No
      - Yes

  pInstanceType:
    Description: EC2 instance type
    Type: String
  pInstanceMaxSize:
    Description: Autoscaling Max Size
    Type: Number
    ConstraintDescription: Autoscaling Max Size
  pInstanceMinSize:
    Description: Autoscaling Min Size
    Type: Number
    ConstraintDescription:  Autoscaling Min Size
  pClusterNodeDesired:
    Description: Desired number of nodes in the cluster.
    Type: Number
  pSolutionS3BucketName:
    Description: Artifact bucket for applications in solution
    Type: String
  pVPCId:
    Description: VPCId
    Type: String  
  pSubnetId:
    Description: SubnetId
    Type: String  
  pSecurityGroupID: 
    Description: SecurityGroupId
    Type: String    
  pEC2KeyName: 
    Description: KeyPairName
    Type: String  
  pELBSubnetId:
    Description: ELBSubnetId
    Type: CommaDelimitedList      
  pELBSecurityGroupID: 
    Description: ELBSecurityGroupId
    Type: String   
  pBuildNumber: 
    Description: BuildNumber
    Type: String     
    
Conditions:
  NonProd: !Or [!Equals [!Ref pLandscape, DEV], !Equals [!Ref pLandscape, TEST], !Equals [!Ref pLandscape, STAGE]]
  Prod:
    Fn::Equals:
      - !Ref pLandscape
      - "PROD"
  SDBEBSVolCondtion: !Not [!Equals [!Ref pEc2SDBEBSVolumeSize, 0]]

Resources:
  rEC2IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - !Ref pLandscape
          - EC2Role
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ec2.amazonaws.com
      Policies:
        - PolicyName: !Sub '${pApplicationName}-inline-policy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowSharedServicesS3Access
                Effect: Allow
                Action:
                  - 's3:Get*'
                  - 's3:List*'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:s3:::${pCompanyName}-${pCompanyGroupName}-${AWS::AccountId}-${AWS::Region}/*
                  - !Sub >-
                    arn:${AWS::Partition}:s3:::${pCompanyName}-${pCompanyGroupName}-${AWS::AccountId}-${AWS::Region}/*
              - Sid: AllowApplicationS3Access
                Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${pSolutionS3BucketName}/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::${pSolutionS3BucketName}'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentAdminPolicy'
  rIAMInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - !Ref pLandscape
          - EC2Role
      Roles:
        - !Ref rEC2IAMRole
  rClusterNodeGroup:
    DependsOn:
      - rALB
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      DesiredCapacity: !Ref pClusterNodeDesired
      LaunchConfigurationName: !Ref rNodeLaunchConfig
      HealthCheckType: ELB
      HealthCheckGracePeriod: 120
      MaxSize: !Ref pInstanceMaxSize
      MinSize: !Ref pInstanceMinSize
      TargetGroupARNs:
        - !Ref rDefaultTargetGroup
      VPCZoneIdentifier:
        - !Ref pSubnetId
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref pLandscape
              - !Ref pApplicationSubGroup
              - node
          PropagateAtLaunch: true
        - Key: CostCenter
          Value: !Ref pCostCenter
          PropagateAtLaunch: true
        - Key: Landscape
          Value: !Ref pLandscape
          PropagateAtLaunch: true
        - Key: BuildNumber
          Value: !Ref pBuildNumber
          PropagateAtLaunch: true          
        - Key: ApplicationGroup
          Value: !Ref pApplicationGroup
          PropagateAtLaunch: true
        - Key: ApplicationSubGroup
          Value: !Ref pApplicationSubGroup
          PropagateAtLaunch: true
        - Key: FundingSource
          Value: !Ref pFundingSource
          PropagateAtLaunch: true
        - Key: OperatingSystem
          Value: !Ref pOperatingSystem
          PropagateAtLaunch: true
        - Key: EC2Backup
          Value: !Ref pEC2Backup
          PropagateAtLaunch: true
        - Key: WBSE
          Value: !Ref pWBSE
          PropagateAtLaunch: true
        - Key: ITDR
          Value: !Ref pITDR
          PropagateAtLaunch: true
  rScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rClusterNodeGroup
      Cooldown: 60
      ScalingAdjustment: 1
  rScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rClusterNodeGroup
      Cooldown: 60
      ScalingAdjustment: -1
  rCPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up if CPU > 50% for 1 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 50
      AlarmActions:
        - !Ref rScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: rClusterNodeGroup
      ComparisonOperator: GreaterThanThreshold
  rNodeLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    Properties:
      AssociatePublicIpAddress: true
      InstanceType: !Ref pInstanceType
      SecurityGroups:
        - !Ref pSecurityGroupID
      KeyName: !Ref pEC2KeyName
      ImageId: !Ref pAMIId
      IamInstanceProfile: !Ref rIAMInstanceProfile
      EbsOptimized: true
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref pEc2RootEBSVolumeSize
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
        - DeviceName: /dev/sdf
          Ebs:
            VolumeSize: !Ref pEc2SDFEBSVolumeSize
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
        - 'Fn::If':
            - SDBEBSVolCondtion
            - DeviceName: /dev/sdb
              Ebs:
                VolumeType: gp3
                DeleteOnTermination: true
                VolumeSize: !Ref pEc2SDBEBSVolumeSize
                Encrypted: true
            - Ref: 'AWS::NoValue'
      UserData:
        'Fn::Base64': !Sub 
          - >
            #!/bin/bash
            yum update -y
            yum install -y httpd
            service httpd start
            chkconfig httpd on
            cd /var/www/html
            echo "<html><h1>Hello! Welcome to the ${pLandscape}
            environment...</h1></html>" > index.html
          - newRoleArn: !Ref rIAMInstanceProfile
  rELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Port access rules for the Elastic LoadBalancer
      VpcId: !Ref pVPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - FromPort: 443
          ToPort: 443
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
  rALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: application
      SecurityGroups:
        - !Ref pELBSecurityGroupID
        - !GetAtt rELBSecurityGroup.GroupId
      Scheme: internet-facing
      Subnets: !Ref pELBSubnetId
      Tags:
        - Key: CostCenter
          Value: !Ref pCostCenter
        - Key: Landscape
          Value: !Ref pLandscape
        - Key: ApplicationGroup
          Value: !Ref pApplicationGroup
        - Key: ApplicationSubGroup
          Value: !Ref pApplicationSubGroup
        - Key: FundingSource
          Value: !Ref pFundingSource
    DependsOn:
      - rELBSecurityGroup
  rLoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref rALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref rDefaultTargetGroup
  rDefaultTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 80
      HealthCheckTimeoutSeconds: 10
      HealthCheckPort: traffic-port
      HealthCheckPath: /index.html
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 8
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: '200,401'
      VpcId: !Ref pVPCId
Outputs:
  oALBDNS:
    Value: !GetAtt 
      - rALB
      - DNSName
